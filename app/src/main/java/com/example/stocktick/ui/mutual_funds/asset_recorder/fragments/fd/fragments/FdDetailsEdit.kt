package com.example.stocktick.ui.mutual_funds.asset_recorder.fragments.fd.fragments

import android.os.Bundle
import android.view.View
import androidx.fragment.app.Fragment
import androidx.fragment.app.activityViewModels
import androidx.navigation.findNavController
import androidx.navigation.fragment.navArgs
import com.example.stocktick.R
import com.example.stocktick.databinding.FragmentFdDetailsEditBinding
import com.example.stocktick.ui.mutual_funds.asset_recorder.fragments.fd.FdViewModel
import com.example.stocktick.ui.mutual_funds.asset_recorder.models.domain.FixedDeposit

class FdDetailsEdit : Fragment(R.layout.fragment_fd_details_edit) {
    private lateinit var binding: FragmentFdDetailsEditBinding
    private val viewModel: FdViewModel by activityViewModels()
    private val args: FdDetailsEditArgs by navArgs()

    private var position : Int = -1

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        binding = FragmentFdDetailsEditBinding.bind(view)
        val navController = view.findNavController()

        binding.fabEdit.setOnClickListener {
            updateList()
            view.findNavController().navigateUp()
        }
        position = args.position
        if (position == -1) return



        val details: FixedDeposit? = try {
            viewModel.getElement(
                position = args.position
            )
        } catch (e: IndexOutOfBoundsException) {
            null
        }
        if (details == null) navController.navigateUp()


        //autogenerated
        if (details!!.bank_name.isNotEmpty()) {
            binding.bankName.setText(details.bank_name)
        }
        if (details!!.branch_addr.isNotEmpty()) {
            binding.branchAddress.setText(details.branch_addr)
        }
        if (details!!.deposit_holders_name.isNotEmpty()) {
            binding.depositHoldersName.setText(details.deposit_holders_name)
        }
        if (details!!.amount_invested.isNotEmpty()) {
            binding.amountInvested.setText(details.amount_invested)
        }
        if (details!!.investment_date.isNotEmpty()) {
            binding.investmentDate.setText(details.investment_date)
        }
        if (details!!.investment_duration.isNotEmpty()) {
            binding.investmentDuration.setText(details.investment_duration)
        }
        if (details!!.rate_of_interest.isNotEmpty()) {
            binding.rateOfInterest.setText(details.rate_of_interest)
        }
        if (details!!.maturity_date.isNotEmpty()) {
            binding.maturityDate.setText(details.maturity_date)
        }
        if (details!!.maturity_amount.isNotEmpty()) {
            binding.maturityAmount.setText(details.maturity_amount)
        }
        if (details!!.nominee_name.isNotEmpty()) {
            binding.nomineeName.setText(details.nominee_name)
        }
        if (details!!.relationship.isNotEmpty()) {
            binding.relationship.setText(details.relationship)
        }
        if (details!!.allocation.isNotEmpty()) {
            binding.Allocation.setText(details.allocation)
        }
        if (details!!.nominee_name2.isNotEmpty()) {
            binding.nomineeName2.setText(details.nominee_name2)
        }
        if (details!!.relationship2.isNotEmpty()) {
            binding.relationship2.setText(details.relationship2)
        }
        if (details!!.allocation2.isNotEmpty()) {
            binding.allocation2.setText(details.allocation2)
        }

    }

    private fun updateList() {
        val model = FixedDeposit(
            bank_name = binding.bankName.text.toString(),
            branch_addr = binding.branchAddress.text.toString(),
            deposit_holders_name = binding.depositHoldersName.text.toString(),
            amount_invested = binding.amountInvested.text.toString(),
            investment_date = binding.investmentDate.text.toString(),
            investment_duration = binding.investmentDuration.text.toString(),
            rate_of_interest = binding.rateOfInterest.text.toString(),
            maturity_date = binding.maturityDate.text.toString(),
            maturity_amount = binding.maturityAmount.text.toString(),
            nominee_name = binding.nomineeName.text.toString(),
            relationship = binding.relationship.text.toString(),
            allocation = binding.Allocation.text.toString(),
            nominee_name2 = binding.nomineeName.text.toString(),
            relationship2 = binding.relationship.text.toString(),
            allocation2 = binding.allocation2.text.toString(),
        )
        if (position != -1)
        viewModel.setElement(args.position, model)
        else viewModel.addElement(model)
    }

}